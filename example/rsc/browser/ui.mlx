let%component some_ui () =
  Js.log "rendering ok";
  <div>"ok"</div>

let%component use_promise ~promise () =
  let v = React.use promise in
  React.string ("a message from server: " ^ v)

let use_interval ~ms f =
  React.useEffect1
    (fun () ->
      let t = Js.Global.setInterval ms ~f in
      Some (fun () -> Js.Global.clearInterval t))
    [| ms |]

(* instantiate client from the routes defintion *)
module Fetch = Ppx_deriving_router_runtime.Make_fetch (Routing)

let%component load_server_time () =
  (* fetch the server time *)
  let start_fetch _ = Fetch.fetch Routing.Api_server_time in
  (* initial fetch *)
  let fetching, set_fetching = React.useState start_fetch in
  (* re-fetch every second *)
  use_interval ~ms:1000 (fun () ->
      (* here we use React.startTransition so that suspense fallback won't be
         shown during refetches, instead prev data is shown *)
      React.startTransition @@ fun () -> set_fetching start_fetch);
  let t = React.use fetching in
  let t = Js.Date.fromFloat (t *. 1000.) in
  React.string ("server time: " ^ Js.Date.toLocaleString t)
