(library
 (name example)
 (libraries react_browser example_env)
 (flags :standard -open Example_env)
 (modes melange)
 (preprocess
  (pps melange.ppx react_ppx)))

(subdir
 env
 (library
  (name example_env)
  (modes melange)
  (libraries env_browser api_browser remote_browser))
 (rule
  (target example_env.ml)
  (action
   (with-stdout-to
    %{target}
    (echo
     "include Env_browser module Api = Api_browser module Remote = Remote_browser")))))

(subdir
 native
 (library
  (name example_native)
  (modes native)
  (flags :standard -open Example_native_env)
  (libraries react_server ppx_yojson_conv_lib example_native_env)
  (preprocess
   (pps react_ppx -native ppx_yojson_conv)))
 (copy_files#
  (files ../**[!.pp].ml))
 (subdir
  env
  (library
   (name example_native_env)
   (modes native)
   (libraries env_native api_native remote_native))
  (rule
   (target example_native_env.ml)
   (action
    (with-stdout-to
     %{target}
     (echo
      "include Env_native module Api = Api_native module Remote = Remote_native"))))))

(melange.emit
 (target output)
 (modules)
 (libraries example)
 (module_systems commonjs))

(rule
 (target ./__boot.js)
 (deps ./output/example/browser/example.js)
 (action
  (with-stdout-to
   %{target}
   (progn
    (run echo "import './output/example/browser/example.js';")
    (run echo "import '%{lib-private:react_browser:runtime.js}';")))))

(rule
 (target ./bundle.js)
 (deps
  (universe)
  (source_tree ./output/example/browser/example)
  ./output/example/browser/example.js
  ./__boot.js)
 (action
  (run
   esbuild
   --log-level=warning
   --bundle
   --loader:.js=jsx
   --outfile=%{target}
   ./__boot.js)))

(install
 (package react_example)
 (section
  (site
   (react_example static)))
 (files
  bundle.js
  (static/tachyons.css as bundle.css)))
