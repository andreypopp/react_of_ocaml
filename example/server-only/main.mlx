open! ContainersLabels
open! Monomorphic
open Lwt.Infix
open React_server

let main, main_href = [%GET "/"]
let hello, hello_href = [%GET "/hello/:name?capitalize=:bool?"]
let api_data, _api_data_href = [%GET "/api/data"]

module UI = struct
  let%async_component card ~delay ~title ~children () =
    Lwt_unix.sleep delay >|= fun () ->
    <div>
      <h3>(React.string title)</h3>
      <div>children</div>
      <div>
        "I've been sleeping for "
        (React.stringf "%0.1f sec" delay)
        " before appearing"
      </div>
    </div>

  let%component page ~title ~children () =
    <html>
      <head><title>(React.string title)</title></head>
      <body>
        <h1><span>(React.string title)</span></h1> <div>children</div>
      </body>
    </html>

  let app _req =
    <page title="React of OCaml">
      <div>
        <card title="Initial Data" delay=0.>
          "This components loads some async data but will block the \
           shell until this data is ready."
          <div>
            <a href=(hello_href () ~capitalize:"true" ~name:"world")>"Go to hello page"</a>
          </div>
        </card>
        <React.Suspense>
          <card title="Async Data" delay=1.>(React.string "HELLO")</card>
          <card title="Async Data" delay=1.>(React.string "HELLO")</card>
        </React.Suspense>
        <React.Suspense>
          <card title="Async Data" delay=2.>(React.string "OUTER")</card>
          <React.Suspense>
            <card title="Inner Async Data" delay=1.>
              (React.string "INNER")
            </card>
          </React.Suspense>
        </React.Suspense>
        <div>
          <h2>(React.string "Testing XSS")</h2>
          <ul>
            <li>"</script><script>console.log(1)</script>"</li>
            <li>"\u{2028}<script>console.log(1)</script>"</li>
          </ul>
        </div>
      </div>
    </page>
end

let to_page_route (route : _ Ppx_router_runtime.route) ui =
  let k ui = React_dream.render ui in
  let register =
    match route.method_ with
    | `GET -> Dream.get
    | `POST -> Dream.post
    | `PUT -> Dream.put
    | `DELETE -> Dream.delete
  in
  register route.path (route.handle k ui)

let () =
  Dream.run ~interface:"0.0.0.0" ~port:8080
  @@ Dream.logger
  @@ Dream.router
       [
         to_page_route main UI.app;
         to_page_route hello (fun ~name ~capitalize _req ->
             let capitalize = Option.is_some capitalize in
             let name = if capitalize then String.capitalize_ascii name else name in
             <div>
               <div>"Hello, " (React.string name)</div>
               <div>
                 "Back to " <a href=(main_href ())>"main page"</a>
               </div>
             </div>);
         Ppx_router_runtime.to_route api_data (fun _req ->
             Dream.json "{}");
       ]
