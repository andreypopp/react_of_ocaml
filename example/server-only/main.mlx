open! ContainersLabels
open! Monomorphic
open Lwt.Infix
open React_server

(* first we define few routes for the app *)
module Routes = struct
  (* we need to open this module to to_url/of_url functions for common OCaml
     types (string, int, etc.) are in scope *)
  open Ppx_router_runtime.Types

  (* now, we showcase how to define a custom type and allow it to be used in
     query parameters *)
  type modifier = [ `capitalize | `uppercase ]

  let modifier_of_url : string -> modifier option = function
    | "capitalize" -> Some `capitalize
    | "uppercase" -> Some `uppercase
    | _ -> None

  let modifier_to_url : modifier -> string = function
    | `capitalize -> "capitalize"
    | `uppercase -> "uppercase"

  (* this is the main page of the app *)
  let main, main_href = [%GET "/"]

  (* this is the hello page, it takes a name and an optional modifier and
     an optional repeat parameter *)
  let hello, hello_href =
    [%GET "/hello/:name?repeat=:int?&modifier=:modifier?"]

  (* just an example of an API route *)
  let api_data, _api_data_href = [%GET "/api/data"]

  let to_page_route (route : _ Ppx_router_runtime.route) ui =
    let k ui = React_dream.render ui in
    let register =
      match route.method_ with
      | `GET -> Dream.get
      | `POST -> Dream.post
      | `PUT -> Dream.put
      | `DELETE -> Dream.delete
    in
    register route.path (route.handle k ui)
end

module UI = struct
  let%async_component card ~delay ~title ~children () =
    Lwt_unix.sleep delay >|= fun () ->
    <div>
      <h3>(React.string title)</h3>
      <div>children</div>
      <div>
        "I've been sleeping for "
        (React.stringf "%0.1f sec" delay)
        " before appearing"
      </div>
    </div>

  let%component page ~title ~children () =
    <html>
      <head><title>(React.string title)</title></head>
      <body>
        <h1><span>(React.string title)</span></h1> <div>children</div>
      </body>
    </html>

  let app _req =
    <page title="React of OCaml">
      <div>
        <card title="Initial Data" delay=0.>
          "This components loads some async data but will block the \
           shell until this data is ready."
          <div>
            <a href=(Routes.hello_href () ~modifier:`uppercase
                       ~name:"world")>
              "Go to hello page"
            </a>
          </div>
        </card>
        <React.Suspense>
          <card title="Async Data" delay=1.>(React.string "HELLO")</card>
          <card title="Async Data" delay=1.>(React.string "HELLO")</card>
        </React.Suspense>
        <React.Suspense>
          <card title="Async Data" delay=2.>(React.string "OUTER")</card>
          <React.Suspense>
            <card title="Inner Async Data" delay=1.>
              (React.string "INNER")
            </card>
          </React.Suspense>
        </React.Suspense>
        <div>
          <h2>(React.string "Testing XSS")</h2>
          <ul>
            <li>"</script><script>console.log(1)</script>"</li>
            <li>"\u{2028}<script>console.log(1)</script>"</li>
          </ul>
        </div>
      </div>
    </page>
end

let () =
  Dream.run ~interface:"0.0.0.0" ~port:8080
  @@ Dream.logger
  @@ Dream.router
       [
         Routes.to_page_route Routes.main UI.app;
         Routes.to_page_route Routes.hello
           (fun ~name ~modifier ~repeat _req ->
             let name =
               match modifier with
               | Some `capitalize -> String.capitalize_ascii name
               | Some `uppercase -> String.uppercase_ascii name
               | None -> name
             in
             let name =
               match repeat with
               | Some repeat ->
                   List.init repeat ~f:(fun _ -> name)
                   |> String.concat ~sep:", "
               | None -> name
             in
             <div>
               <div>"Hello, " (React.string name)</div>
               <div>
                 "Back to " <a href=(Routes.main_href ())>"main page"</a>
               </div>
             </div>);
         Ppx_router_runtime.to_route Routes.api_data (fun _req ->
             Dream.json "{}");
       ]
