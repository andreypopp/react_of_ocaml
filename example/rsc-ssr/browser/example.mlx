open Routing

type Remote.tag += Tag_app | Tag_todo

let%component link' ~href ~label () =
  let%browser_only onClick ev =
    React.Event.Mouse.preventDefault ev;
    React_browser.Router.navigate href
  in
  <a href onClick>(React.string label)</a>

let%component with_children ~children:_ () = <div />

let%component button' ~onPress:onClick ~label () =
  <button className="pv1 ph2 br1 bg-light-gray bw1 b--gray" onClick>
    (React.string label) <with_children>"OK"</with_children>
  </button>

let%component hello ~name () =
  let q, setq =
    React.useState (fun () -> Data.Hello.fetch ~tags:[Tag_app] (Hello { name }))
  in
  let () =
    React.useEffect1
      (fun () ->
        React.startTransition (fun () ->
          setq (fun _ -> Data.Hello.fetch ~tags:[Tag_app] (Hello { name })));
        None)
      [| name |]
  in
  let msg = React.use q in
  let%browser_only (onClick [@ocaml.warning "-26"]) =
   fun _ev ->
    ignore
      (Promise.(
         let* () =
           Data.Hello.run
             (Update_greeting { greeting = Greeting_informal })
         in
         Data.Hello.invalidate_tag Tag_app;
         React.startTransition (fun () ->
             setq (fun _ -> Data.Hello.fetch (Hello { name })));
         return ())
        : unit Promise.t)
  in
  <div onClick>(React.string msg)</div>

let%component counter ~init ~title () =
  let v, setv = React.useState (Fun.const init) in
  let succ _ev = React.startTransition @@ fun () -> setv Int.succ in
  let pred _ev = React.startTransition @@ fun () -> setv Int.pred in
  let reset _ev = React.startTransition @@ fun () -> setv (Fun.const 0) in
  <div className="pa4">
    <h2>(React.string title)</h2>
    <p>(React.string ("clicked " ^ string_of_int v ^ " times"))</p>
    <button' onPress=succ label="Increment" />
    <button' onPress=pred label="Decrement" />
    <button' onPress=reset label="Reset" />
    <hello name=(Printf.sprintf "hello #%i" v) />
    <hello name=(Printf.sprintf "hello #%i" v) />
  </div>

module Wait_and_print = struct
  let%component make ~promise ?promise2 ~msg () =
    let () = React.use promise in
    let () = Option.map React.use promise2 |> Option.value ~default:() in
    <li>(React.string msg)</li>
end

let%component wait_and_print ~promise ?promise2 ~msg () =
  let () = React.use promise in
  let () = Option.map React.use promise2 |> Option.value ~default:() in
  <li>(React.string msg)</li>

let%component nav' () =
  <ul>
    <li><link' href=(href Home) label="Main page" /></li>
    <li><link' href=(href Todo) label="TODOs" /></li>
    <li><link' href=(href About) label="About" /></li>
  </ul>

type about_mode = About_light | About_dark [@@deriving json]

let%export_component about ~(mode : about_mode) ~(num : int) () =
  let _ = num in
  let%browser_only () =
    match mode with
    | About_dark -> Js.log "dark"
    | About_light -> Js.log "light"
  in
  <div><nav' /></div>

let%export_component app ~(title : string) ~(inner : React.element) () =
  let promise = Promise.sleep 1.0 in
  let promise2 = Promise.sleep 2.0 in
  let promise_inner = Promise.sleep 0.5 in
  let%browser_only () =
    React.useEffect1
      (fun () ->
        Js.log "HELLO, I'M READY";
        None)
      [||]
  in
  <div>
    <nav' />
    <React.Suspense>
      <hello name="world" /> <hello name="something else" />
    </React.Suspense>
    <h2>"Hello, " (React.string title) "!"</h2>
    <React.Suspense><counter init=42 title="Counter" /></React.Suspense>
    <div className="footer">inner inner</div>
    <ul>
      <React.Suspense>
        <React.Suspense>
          <Wait_and_print promise=promise_inner msg="INNER SLEPT" />
        </React.Suspense>
        <React.Suspense>
          <wait_and_print promise=promise_inner msg="INNER SLEPT" />
        </React.Suspense>
        <wait_and_print promise promise2 msg="SLEPT" />
        <wait_and_print promise promise2 msg="SLEPT" />
      </React.Suspense>
    </ul>
  </div>

let%component todo_item ~on_completed ~mode ~(todo : Api.Todo.todo) () =
  let%browser_only onChange _ev =
    on_completed todo (not todo.completed)
  in
  let label = match mode with
    | `loaded -> React.null
    | `local -> React.string " (loading...)"
  in
  <li className="ma0 pa0 flex items-center">
    <label>
      <input className="scale3"
             type_="checkbox"
             checked=todo.completed
             onChange />
      <span className="pl2">(React.string todo.text) label</span>
    </label>
  </li>

let%component todo_section ~title ~on_completed ~todos () =
  let todos =
    List.map
      (fun (mode, todo) ->
        let key = Int.to_string todo.Api.Todo.id in
        <todo_item key on_completed mode todo />)
      todos
  in
  <div className="pb2">
    <h5 className="ma0 pv2">(React.string title)</h5>
    <ul className="ma0 pv0 ph2 flex flex-column g1">
      (React.array (Array.of_list todos))
    </ul>
  </div>

let%component add_todo_form ~on_create () =
  let value, set_value = React.useState (fun () -> "") in
  let input, set_input = ReactDOM.Ref.useCurrentDomRef () in
  let%browser_only onChange ev =
    let value = React.Event.Form.(target ev)##value in
    set_value (fun _ -> value)
  in
  let%browser_only create () =
    on_create value;
    set_value (fun _ -> "");
    let el = Js.Nullable.toOption input.current in
    let el = Option.bind el Webapi.Dom.HtmlElement.ofElement in
    Option.iter Webapi.Dom.HtmlElement.focus el
  in
  let%browser_only onKeyDown ev =
    match React.Event.Keyboard.key ev with
    | "Enter" -> create ()
    | _ -> ()
  in
  let%browser_only onClick _ev = create () in
  <div>
    <input ref=set_input onChange onKeyDown type_="text" value />
    <button onClick>"Add"</button>
  </div>

type todo_action = A : _ Api.Todo.t -> todo_action
type todo = [ `loaded | `local ] * Api.Todo.todo

(* define how we update local state optimistically *)
let useOptimisticTodos todos =
  let%browser_only update todos (A action) : todo list =
    match action with
    | List -> todos
    | Create { text } ->
      let todo = { Api.Todo.id = List.length todos; text; completed = false } in
      (`local, todo)::todos
    | Update { id; text; completed } ->
      List.map (fun (mode, t) -> 
        if t.Api.Todo.id = id then 
          let text = Option.value ~default:t.text text in
          let completed = Option.value ~default:t.completed completed in
          `local, { t with text; completed }
        else mode, t) todos
    | Remove_completed ->
      List.filter (fun (_, t) -> not t.Api.Todo.completed) todos
  in
  React.useOptimistic todos update

let%component todo_list' () =
  (* define how to fetch todos *)
  let fetch_todos () = Data.Todo.fetch ~tags:[Tag_todo] List in
  (* the currently fetching/fetched todos *)
  let todos, set_todos =
    let todos, set_todos = React.useState fetch_todos in
    let todos = React.use todos in
    let todos = List.map (fun x -> `loaded, x) todos in
    todos, set_todos
  in
  (* todos with optimistic updates applied *)
  let todos, update = useOptimisticTodos todos in
  (* define how to modify todos *)
  let%browser_only run_action (type a) (action : a Api.Todo.t) =
    React.startTransition @@ fun () ->
    (* update local state optimistically *)
    update (A action);
    let fetching =
      Promise.(
        (* invalidate the cache *)
        Data.Todo.invalidate_tag Tag_todo;
        (* run the action *)
        let* _ = Data.Todo.run action in
        (* refetch the todos *)
        fetch_todos ())
    in
    set_todos (fun _ -> fetching)
  in
  let%browser_only on_create text = run_action (Create { text }) in
  let%browser_only on_remove_completed _ev = run_action Remove_completed in
  let%browser_only on_completed (todo : Api.Todo.todo) completed =
    run_action (Update { id = todo.id; completed = Some completed; text = None })
  in
  let completed, to_be_done =
    List.partition_map
      (fun (_, todo as item) ->
        match todo.Api.Todo.completed with
        | true -> Left item
        | false -> Right item)
      todos
  in
  <div>
    <add_todo_form on_create />
    <todo_section title="To be done" on_completed todos=to_be_done />
    <todo_section title="Completed" on_completed todos=completed />
    <button onClick=on_remove_completed>"Remove completed todos"</button>
  </div>

let%export_component todo_list () = <div><nav' /> <todo_list' /></div>

let%component wait_for_promise ~promise () =
  let value = React.use promise in
  <div>"Promise resolved: " (React.string value)</div>

let%export_component demo_passing_promises_as_props ~(promise : string Promise.t) () =
  <div>
    <div>"waiting for promise to resolve:"</div>
    <React.Suspense fallback=(<div>"..."</div>)>
      <wait_for_promise promise />
    </React.Suspense>
  </div>

let%browser_only () =
  Js.log "this will execute only in browser on startup"
