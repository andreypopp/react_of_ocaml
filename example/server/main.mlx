open! ContainersLabels
open! Monomorphic
open Lwt.Infix

module UI = struct
  open React_server

  let%async_component card ~delay ~title ~children () =
    Lwt_unix.sleep delay >|= fun () ->
    <div className="ba pa2">
      <h3 className="ma0 pa0 pb2">(React.text title)</h3>
      <div className="pb2">(React.array children)</div>
      <div className="f7 bt pa1">
        "I've been sleeping for "
        (React.textf "%0.1f sec" delay)
        " before appearing"
      </div>
    </div>

  let%component page ~title ~children () =
    <html className="h-100">
      <head><title>(React.text title)</title></head>
      <body className="pa4 sans-serif dark-gray bg-washed-yellow h-100">
        <h1><span>(React.text title)</span></h1>
        <div>(React.array children)</div>
      </body>
    </html>

  let app _req =
    <page title="React of OCaml">
      <div className="flex flex-column g2 measure-wide">
        <Example.app title="Hello from Client Component"
                     inner=(React.text
                              "As you can see, this one is SSR'ed as \
                               well.") />
        <card title="Initial Data" delay=0.>
          "This components loads some async data but will block the \
           shell until this data is ready."
        </card>
        <React.suspense>
          <card title="Async Data" delay=1.>(React.text "HELLO")</card>
          <card title="Async Data" delay=1.>(React.text "HELLO")</card>
        </React.suspense>
        <React.suspense>
          <card title="Async Data" delay=2.>(React.text "OUTER")</card>
          <React.suspense>
            <card title="Inner Async Data" delay=1.>
              (React.text "INNER")
            </card>
          </React.suspense>
        </React.suspense>
        <div>
          <h2>(React.text "Testing XSS")</h2>
          <ul>
            <li>"</script><script>console.log(1)</script>"</li>
            <li>"\u{2028}<script>console.log(1)</script>"</li>
          </ul>
        </div>
      </div>
    </page>

  let about _req =
    <page title="About">
      <div className="flex flex-column g2 measure-wide">
        <p>(React.text "Just an about page")</p>
        <Example.about num=1 mode=About_light />
      </div>
    </page>

  let todos _req =
    <page title="TODOs">
      <div className="flex flex-column g2 measure-wide">
        <Example.todo_list />
      </div>
    </page>
end

let () =
  let static =
    Static.Sites.static
    |> List.head_opt
    |> Option.get_exn_or "no /static dir found"
  in
  let links = [ "/static/bundle.css" ] in
  let scripts = [ "/static/bundle.js" ] in
  let render ui = React_dream.render ~links ~scripts ui in
  Dream.run ~interface:"0.0.0.0"
  @@ Dream.logger
  @@ Dream.router
       ([
          Dream.get "/static/**" (Dream.static static);
          Dream.get "/" (render UI.app);
          Dream.get "/about" (render UI.about);
          Dream.get "/todo" (render UI.todos);
          Dream.get "/no-ssr"
            (React_dream.render ~enable_ssr:false ~links ~scripts UI.app);
        ]
       @ Api.Hello.routes
       @ Api.Todo.routes)
