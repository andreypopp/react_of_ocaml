consider the type declaration:

    type user = {
      name: string [@sql.primary_key];
      created_at: float;
      updated_at: float option;
    } [@@deriving sql.table]

this will produce the following methods:

    val init_user : db -> unit
    val find_user : name:string -> db -> user option
    val select_user_by : ?limit:int -> ?offset:int -> bool e -> db -> user list
    val insert_user : user -> db -> unit
    val update_user : user -> db -> unit
    val upsert_user : user -> db -> unit
    val delete_user : user -> db -> unit
    val delete_user_by : bool e -> db -> unit
    val update_user_by : ?name:string e -> ?created_at:float e -> ?updated_at:float e option -> bool e -> db -> unit

now notice the 'a e type, those are expression, to build such expressions we
also have column expressions generated:

    val user_name : string e
    val user_created_at : float e
    val user_updated_at : float option e

(experimental) to build arbitrary queries we have scope generated and a query:

    val user_scope = < 
      name : string e;
      created_at : float e;
      updated_at : float e;
      > scope

    val user_query : user_scope q

the API for experessions and query building looks like this:

    module E : sig
      type 'type e
    end

    module Q : sig
      open E

      type 'scope q
      val where : ('a -> bool e) -> 'a q -> 'a q
      val join : 'b q -> ('a -> 'b -> bool e) -> 'a q -> ('a * 'b) q
      val left_join : TODO
      val group_by : 'a q -> 'b q
    end

    let q =
      user_query
      |> left_join post_query @@ fun (user, post) -> E.(user.name = post.user_name)
      |> select @@ fun%scope (user, posts) -> {username = user.name}
      |> group_by @@ fun%scope user -> {username = user.name}
      |> select @@ fun%select agg -> {
           name = s.username;
           max = Agg.max agg.user (fun%scope user -> user.created_at)
         }

(experimental) variant types support

    type user =
      | Anonymous of {name: string}
      | Registered of {name: string; id : int}

will result in the following DDL

    CREATE TABLE user (
      type ENUM('Anonymous', 'Registered') NOT NULL,
      name TEXT,
      id INT
    )

    
