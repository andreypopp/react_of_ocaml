open ContainersLabels

module Select = struct
  let%component select ~id ~children () =
    <Hx.Request path="/select"
                trigger=On_click
                target="selected"
                params=[ "id", `Int id ]>
      <li>children</li>
    </Hx.Request>

  let%component target ?(placeholder = React.null) () =
    <Hx.Target id="selected">placeholder</Hx.Target>

  let handle_select =
    Hx.hx_handle `GET "/select" @@ fun req ->
    match Dream.query req "id" with
    | None -> <span>"ERROR: no id passed"</span>
    | Some id -> (
        try
          let id = Int.of_string_exn id in
          <span>"SELECTED: " (React.string (string_of_int id))</span>
        with Failure msg -> <span>"ERROR: " (React.string msg)</span>)

  let handlers = [ handle_select ]
end

module Profile_form = struct
  type profile = { first_name : string; last_name : string }

  let profile = ref { first_name = "Andrey"; last_name = "Popp" }

  let%component profile_view ~profile () =
    <div>
      <div>
        <label>"First Name: "</label> (React.string profile.first_name)
      </div>
      <div>
        <label>"Last Name: "</label> (React.string profile.last_name)
      </div>
      <Hx.Request path="/profile/edit" trigger=On_click>
        <button>"Edit"</button>
      </Hx.Request>
    </div>

  let%component profile_edit ~profile () =
    <Hx.Form id="profile_form">
      <div>
        <label>"First Name: "</label>
        <input name="first_name"
               type_="text"
               defaultValue=profile.first_name />
      </div>
      <div>
        <label>"Last Name: "</label>
        <input name="last_name"
               type_="text"
               defaultValue=profile.last_name />
      </div>
      <Hx.Request path="/profile/save"
                  params_target="profile_form"
                  trigger=On_submit>
        <button>"Save"</button>
      </Hx.Request>
    </Hx.Form>

  let%component make ?(mode = `View) () =
    let children =
      match mode with
      | `View -> <profile_view profile=!profile />
      | `Edit -> <profile_edit profile=!profile />
    in
    <Hx.Target id="profile">children</Hx.Target>

  let handle_edit =
    Hx.hx_handle `GET "/profile/edit" @@ fun _req ->
    <profile_edit profile=!profile />

  let handle_save =
    Hx.hx_handle `GET "/profile/save" @@ fun req ->
    let first_name =
      Dream.query req "first_name" |> Option.get_exn_or "oops"
    in
    let last_name =
      Dream.query req "last_name" |> Option.get_exn_or "oops"
    in
    profile := { first_name; last_name };
    <profile_view profile=!profile />

  let handle = [ handle_edit; handle_save ]
end

let main _ =
  <html>
    <body>
      <h1>"Demo: a simple request"</h1>
      <div>
        "HELLO, "
        <Hx.Request path="/click" trigger=On_click>"CLICK ME"</Hx.Request>
      </div>
      <h1>"Demo: selecting an item"</h1>
      <ul>
        <Select.select id=1>"one"</Select.select>
        <Select.select id=2>"two"</Select.select>
        <Select.select id=3>"three"</Select.select>
      </ul>
      <Select.target placeholder=(React.string "No item selected") />
      <h1>"Demo: form"</h1>
      <div><Profile_form /></div>
    </body>
  </html>

let clicked = ref 0

let message _ =
  clicked := !clicked + 1;
  <span>"WORLD!" <b>" (clicked " (React.int !clicked) ")"</b></span>

let () =
  Dream.run ~interface:"0.0.0.0"
  @@ Dream.logger
  @@ Dream.router
       ([
          Hx.hx_runtime ();
          Hx.hx_page "/" main;
          Hx.hx_handle `GET "/click" message;
        ]
       @ Select.handlers
       @ Profile_form.handle)
