{0 React_of_ocaml}

{1 Introduction}

React_of_ocaml provides a set of OCaml libraries:

- {!modules: React_server} implements an HTML template engine with built-in data
  fetching.

Interfaces targeting both server and browser (via Melange toolchain)
environments.

The browser part consists of bindings to React.js library. The server part
implements Server Side Rendering (SSR) and React Server Components (RSC).

{1 User Guides}

{2 Server side templating}

React_of_ocaml can be used to develop server side only applications, effectively
functioning as a template engine for HTML.

Here's an example [main.ml] executable which server a very simple React server
app:

{v

let%component page ~title body =
  jsx.html [|
    jsx.head [| jsx.title [| textf "My app / %s" title |] |];
    jsx.body body
  |]
let index req =
  let name = Dream.query req "name" |> Option.value ~default:"World" in
  page ~title:"Main Page" [|
    textf "Hello, %s!" name;
  |]
let () =
  Dream.run
  @@ Dream.router [ Dream.get "/" (React_dream.render app) ]

v}

And the [dune] config to build and run it:

{v
(executable
 (name main)
 (libraries react_server react_dream dream)
 (preprocess (pps react_ppx -native)))
v}

Then:

{v dune exec ./main.exe v}

{2 Browser side interactivity}

{2 Browser only code}

{1 Examples}

{2 RSC + SSR}

While the package is not yet release to OPAM repository, it is suggested to try
the example application from the react_of_ocaml repository:

{[

  git clone https://github.com/andreypopp/react_of_ocaml
  cd react_of_ocaml
  make init build start

]}

Now navigate to {{:https://localhost:8080}https://localhost:8080} in a browser.

{1 Reference}

{2 Browser APIs}

{!modules: React_browser}

{2 Server APIs}

{!modules: React_server React_dream}

{2 Common APIs}

{!modules: React_api}
